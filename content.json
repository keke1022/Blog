{"posts":[{"title":"Driving Licence Test","text":"DescriptionI am preparing for the Driving Licence Test in MI recently. The following are some of the problems I encountered when I am taking tests on the DMV Website. Hope that helps! Problem and AnswerThe “No zone” is: A term used to describe blind spots around a truck or bus. From top to bottom, the following is the proper order for traffic lights: Red, Yellow, Green Park speed limit: 15 mph Unless otherwise posted, the speed limit in condominium complexes is: 25 mph. Unless otherwise posted, the speed limit on state highways is: 55 mph Unless otherwise posted, the maximum speed limit on freeways is: 70 mph. A reflective orange triangle on the back of a vehicle indicates: It is a slow-moving vehicle. When passing a large vehicle, the driver of a small vehicle must be prepared for: Wind gusts produced by the large vehicle. A “No standing” sign at a certain location means: You may stop temporarily only to pickup or discharge passengers. What is the first thing you should adjust, if needed, when you get into a car to drive? Seat While backing, you should: Turn your head and look through the rear window. A flashing red traffic signal at an intersection has the same requirements as: A stop sign. The driver’s left arm and hand are extended downward. This hand signal means that the driver plans to: Stop When merging onto a freeway, it is usually best to: Accelerate to the speed of freeway traffic. When you park uphill on a street with a curb: Turn the front wheels away from the curb. A flashing red traffic light means the same thing as a stop sign. You must come to a complete stop, yield to cross traffic and pedestrians, and then proceed when the way is clear. What should you do if your accelerator sticks while you are driving? Shift to neutral and apply steady pressure on the brake. When driving in normal traffic conditions, you should signal to turn ____ before beginning the turn. 100 feet Signs indicating areas of public recreation are: Brown When driving in traffic, it is safest to: Drive with the flow of traffic. When faced with an oncoming car to the left and a bicyclist to the right, you should: Let the car pass and then pass the bike. When traveling on a multilane roadway with traffic moving in opposite directions, how should drivers use the shared center lane? To slow down or stop before turning left. The correct way to use a freeway exit ramp is to: Slow down once moving onto the exit ramp. Your body gets rid of approximately: One alcoholic drink an hour. A broken yellow line alongside a solid yellow line means: Passing is permitted from the lane next to the broken line. It is illegal for a person 21 years of age or older to drive with a minimum blood alcohol concentration (BAC) of: 0.08 percent. You may not park within ____ of a railroad crossing. 50 feet Drivers should always look down the road ____ ahead of their vehicle. 12 seconds Your horn should be used as a warning in situations where you think another driver or a pedestrian does not see you. For example, if a child begins to run into the street in front of your vehicle, you should sound your horn. During normal weather and traffic conditions, keep a minimum following distance of: Three to four seconds. During adverse weather and traffic conditions, or increased driving speeds, keep a following distance of: Six or more seconds. A bicyclist who doesn’t obey traffic laws: Can be ticketed. The driver of a passenger vehicle must change lanes completely when passing a motorcycle. Certain highway signs require drivers to obey an indicated instruction. Such signs are known as: Regulatory signs. Signs that are colored orange are: Work zone signs. You are stopped in a line of vehicles waiting at a stop sign. If there is no cross traffic after the vehicles ahead have passed through the intersection, you: Must stop again at the stop sign or stop line before proceeding. You want to turn left at an intersection. The light is green but oncoming traffic is heavy. You should: Wait in the center of the intersection for traffic to clear. A leaky exhaust system in your vehicle is dangerous because it can cause: Carbon monoxide poisoning. When parallel parking, you should park within ____ inches of the curb. 12 A driver can legally pass on the right side of another vehicle: If the vehicle is waiting to turn left and there is an available passing lane. A “No stopping” sign means that, unless directed to do so by a police officer, you may stop only: To avoid conflict with other traffic. A speed restriction sign: Shows a recommended speed for a curve or turn. If a green arrow turns into a solid green light, you: May still turn, but you must yield to oncoming traffic. If traffic signals at an intersection are not functioning due to a power outage: Treat the intersection as a four-way stop. six or more one-point violation / 12 or more points within two years -&gt; reexaminations","link":"/2023/12/28/Driver-Licence-Test/"},{"title":"Crash Course of Dafny","text":"From https://github.com/dafny-lang/dafny. Loop Invariants123456789101112131415161718192021222324252627282930313233343536function Fib (x : nat) : nat { if x &lt; 2 then x else Fib(x-1) + Fib(x-2)}method make (n : nat) returns (x : int) ensures x == Fib(n){ var i := 0; x := 0; var y := 1; while i &lt; n invariant 0 &lt;= i &lt;= n invariant x == Fib(i) &amp;&amp; y == Fib(i+1) { i := i + 1; x, y := y, x + y; }}function Sum (n : nat) : nat{ if n == 0 then 0 else n + Sum(n - 1)}method make_sum (n : nat) returns (x : nat)ensures x == Sum (n){ x := 0; var i := 0; while i &lt; n invariant 0 &lt;= i &lt;= n invariant x == Sum(i) { x := x + i + 1; i := i + 1; }} Binary Search12345678910111213141516171819202122232425method binarySearch (arr : array&lt;int&gt;, key : int) returns (r : int) requires forall i, j :: 0 &lt;= i &lt; j &lt; arr.Length ==&gt; arr[i] &lt; arr[j] ensures r &lt; 0 ==&gt; forall i :: 0 &lt;= i &lt; arr.Length ==&gt; key != arr[i] ensures r &gt;= 0 ==&gt; r &lt; arr.Length &amp;&amp; arr[r] == key{ var lo := 0; var hi := arr.Length; while lo &lt; hi invariant 0 &lt;= lo &lt;= hi &lt;= arr.Length invariant forall i :: 0 &lt;= i &lt; lo ==&gt; arr[i] &lt; key invariant forall i :: hi &lt;= i &lt; arr.Length ==&gt; arr[i] &gt; key { var mid := (hi - lo) / 2 + lo; if arr[mid] &gt; key { hi := mid; } else if arr[mid] &lt; key { lo := mid + 1; } else { return mid; } } return -1;} Sorting123456789101112131415161718192021222324252627282930datatype Color = Red | White | Bluepredicate Below (a : Color, b : Color) { a == Red || b == Blue || a == b}method sort_alg (arr : array&lt;Color&gt;) modifies arr ensures forall i, j :: 0 &lt;= i &lt; j &lt; arr.Length ==&gt; Below(arr[i], arr[j]) ensures multiset(arr[0..arr.Length]) == multiset(old (arr[0..arr.Length])){ var r, w, b := 0, 0, arr.Length; while w &lt; b invariant 0 &lt;= r &lt;= w &lt;= b &lt;= arr.Length invariant forall i :: 0 &lt;= i &lt; r ==&gt; arr[i] == Red invariant forall i :: r &lt;= i &lt; w ==&gt; arr[i] == White invariant forall i :: b &lt;= i &lt; arr.Length ==&gt; arr[i] == Blue invariant multiset(arr[0..arr.Length]) == multiset(old (arr[0..arr.Length])) { match arr[w] case Red =&gt; arr[r], arr[w] := arr[w], arr[r]; r, w := r + 1, w + 1; case White =&gt; w := w + 1; case Blue =&gt; arr[w], arr[b - 1] := arr[b - 1], arr[w]; b := b - 1; }}","link":"/2024/01/13/Crash-Course-of-Dafny/"},{"title":"Intro_to_PL (Week 1)","text":"Static / Dynamic EnvironmentStatic Environment checks type, which does not run the program.Dynamic Environment calculates the value. 123456789101112131415val x = 1;(* Static Environment : x -&gt; int *)(* Dynamic Environment : x -&gt; 1 *)val y = 2;(* Static Environment : x -&gt; int, y -&gt; int *)(* Dynamic Environment : x -&gt; 1, y -&gt; 2 *)val z = (x + y) + (y + 1);(* Static Environment : x -&gt; int, y -&gt; int, z -&gt; int *)(* Dynamic Environment : x -&gt; 1, y -&gt; 2, z -&gt; 6 *)val abs_z = if z &lt; 0 then 0 - z else z;(* Static Environment : x -&gt; int, y -&gt; int, z -&gt; int, abs_z -&gt; int *)(* Dynamic Environment : x -&gt; 1, y -&gt; 2, z -&gt; 6, abs_z -&gt; 6 *) Expression: syntax type checking rule evaluation rule For Variable: syntax: sequence of letters, digits, _, but not starting with digits. type checking: look up at current static environment. If not there, fail. evaluation rule: look up at current dynamic environment. REPL: Read Evaluations Print Loop Shadowing1234567891011val x = 1;(* Static Environment : x -&gt; int *)(* Dynamic Environment : x -&gt; 1 *)val y = 2;(* Static Environment : x -&gt; int, y -&gt; int *)(* Dynamic Environment : x -&gt; 1, y -&gt; 2 *)val x = x + 1;(* Static Environment : x -&gt; int, y -&gt; int *)(* Dynamic Environment : x -&gt; 1, y -&gt; 2, z -&gt; 2 *) FunctionSyntax: fun $x(x_1 : t_1, x_2 : t_2, \\cdots, x_n : t_n) = e$. Evaluation: a function is a value. Type checking: check in the static environment if $x$ has type $t_1 t_2 \\cdots -&gt; t$ $x_i$ has type $t_i$. then $x(x_1 : t_1, x_2 : t_2, \\cdots, x_n : t_n)$ has type $t$. 12345(* val pow = fn : int * int -&gt; int *)fun pow(x : int, y : int) = if y = 0 then 1 else pow(x, y - 1) Pair, Tuple and listsPair Syntax : $(e_1, e_2)$ Evaluation : a pair is a value Type Checking : $ta * tb$ 1234567891011(* (int * int) * (int * int) -&gt; int *)fun sum(x : int * int, y : int * int) = (#1 x) + (#2 x) + (#1 y) + (#2 y) fun div_mod(x : int, y : int) = (x div y, x mod y)fun sort_pair(x : int * int) = if (#1 x &lt; #2 x) then x else (#2 x, #1 x) Tuple12345(* int * (bool, int) *)val x = (7, (true, 9));(* bool *)val y = #1 (#2 x) List1234567891011121314151617val a = []val a = [1, 2, 3]val a = 0::a(*[opening test.sml] │val a = &lt;hidden&gt; : 'a list │val a = &lt;hidden&gt; : int list │val a = [0,1,2,3] : int list │val it = () : unit*)[6]::[[1, 2, 3], [1, 2]]null []; (* true *)hd [1, 2, 3] (* return 1 *)tl [1, 2, 3] (* return [2, 3] *)[(1, 2), (1, 3)] (* (int * int) list *) list functions123456789fun sum_list (xs : int list) = if null xs then 0 else hd xs + sum_list(tl xs)fun count_down (x : int) = if x = 0 then [] else x::count_down(x - 1) Let ExpressionSyntax: let $b_1, b_2, \\cdots, b_n$ in $e$ end ($b_i$ is a binding, $e$ is an expression)12345678910111213141516fun silly () = let val x = 1; in (let val x = 2 in x + 1 end) + (let val y = x + 2 in y + 1 end) endfun countup (x : int) = let fun count_from_to (from : int, to : int) = if from = to then [] else from::count_from_to(from + 1, to) in count_from_to(1, x + 1) end Options123456789fun max1(xs : int list) = if null xs then NONE else let val tl_max = max1(tl xs) in if isSome tl_max andalso hd xs &lt; valOf tl_max then tl_max else SOME(hd xs) end Boolean $e_1$ andalso $e_2$ $e_1$ orelse $e_2$ not $e_1$ No MutationML do not have mutations. ML cannot tell aliases, but it does not matter because there is no mutations. (E.g.: tl function returns an alias, which is faster than returning a copy of a list)","link":"/2023/12/17/Intro_to_PL%20(Week%201)/"},{"title":"Intro_to_PL (Week 4)","text":"Type InferenceAnalysis the constraints (e.g., a &gt; 0 infers a : int). Use type variables (e.g., ’a) for any unconstrained types in function arguments or results. Here is an example:1fun compose (f, g) = fn x =&gt; f (g x) The function compose has the type: T1 * T2 -&gt; T3. The anonymous function has the type: T3 = T4 -&gt; T5. g has the type: T4 -&gt; T6. f has the type: T6 -&gt; T7. T7 = T5. compose has the type: (T6 -&gt; T5) * (T4 -&gt; T6) -&gt; (T4 -&gt; T5). Using Type Variant: ('a -&gt; 'b) * ('c -&gt; 'a) -&gt; ('c -&gt; 'b). The Value RestrictionOnly by Type Inference is not enough.123val x = ref NONE (* type of r : ?.X1 option ref *)val _ = x := SOME &quot;hi&quot;val _ = 1 + valOf (!x)This creates a dummy type for x, which cannot be used later. In general, ML will give a variable in a val-binding a polymorphic type only if the expression in the val-binding is a value or a variable. This is called the value restriction. In our example, ref NONE is a call to the function ref. Function calls are not variables or values. Similarly, val pairWithOne = List.map (fn x =&gt; (x,1)) does not work. Mutual Inference12datatype t1 = Foo of int | Bar of t2and t2 = Baz of string | Quux of t1 Modual SystemSyntax: structure Name = struct bindings end 12345structure MyLib = struct val half_pi = Math.pi / 2.0 fun myFunc x = x / 2.0end Signature matchingstructure FOO :&gt; BAR A signature’s type binding for a function must be more specific than the type binding for the function in the module. Here is an example,12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152signature MySig =sig datatype rational = Whole of int | Frac of int * int exception BadFrac val make_frac : int * int -&gt; rational val add : rational * rational -&gt; rational val toString : rational -&gt; string endstructure MyRational :&gt; MySig =struct datatype rational = Whole of int | Frac of int * int exception BadFrac fun make_frac (x,y) = if y = 0 then raise BadFrac else if y &lt; 0 then Frac(~x,~y) else Frac(x,y) fun add (r1,r2) = case (r1,r2) of (Whole(i),Whole(j)) =&gt; Whole (i + j) | (Whole(i),Frac(j,k)) =&gt; Frac(j+k*i,k) | (Frac(j,k),Whole(i)) =&gt; Frac(j+k*i,k) | (Frac(a,b),Frac(c,d)) =&gt; Frac(a*d + b*c, b*d) fun toString r = let fun gcd (x,y) = if x=y then x else if x &lt; y then gcd(x,y-x) else gcd(y,x) fun reduce r = case r of Whole _ =&gt; r | Frac(x,y) =&gt; if x=0 then Whole 0 else let val d = gcd(abs x,y) in if d=y then Whole(x div d) else Frac(x div d, y div d) end in case reduce r of Whole i =&gt; Int.toString i | Frac(a,b) =&gt; (Int.toString a) ^ &quot;/&quot; ^ (Int.toString b) endend EquivalenceIt is important to think whether some functions have side effects. The following code is not equivalent in ML:123val y = 2fun f1 (f, g) = (f x) + (f x)fun f2 (f, g) = y * (f x) This is because f might print out something or increment a variable.","link":"/2024/01/15/Intro-to-PL-Week-4/"},{"title":"Intro_to_PL (Week 2)","text":"Build Compound TypesThree types: Each of: Tuple One of: Option Self reference: List Records 1val x = {name=&quot;keke&quot;, id=2002} Tuples as Syntactic Sugar12(* val x = (true,&quot;hi&quot;,3) : bool * string * int *)val x = {1=true, 3=3, 2=&quot;hi&quot;}; Data Type123datatype myType = Twoints of int * int | Str of string | Pizza Twoints is called a constructor of type (int * int) -&gt; myType. Then any myType is constructed using one of the constructors. A value contains: A tag for which constructor (e.g., Twoints). Corresponding data (e.g., (4, 7)). Case12345fun f x = case x of Pizza =&gt; 3 | Str s =&gt; String.size s | Twoints(i1, i2) =&gt; i1 + i2 In the example here, Pizza, Str s, and Twoints(i1, i2) are patterns and the RHS are expressions. Type SynonymsUse the keyword type Polymorphic DatatypesSyntax:1234datatype 'a option = NONE | SOME of 'adatatype ('a, 'b) tree = Node of 'a * ('a, 'b) tree * ('a, 'b) tree | Leaf of 'b Each of Pattern MatchingWe can think of writing val v = e as a type of case expression. A function argument can also be a pattern, i.e., fun f p = e. Here is an example:123456789101112131415(* A poor style of writing pattern matching *)fun sum_triple tri = case tri of (x, y, z) =&gt; x + y + z(* A good way of writing pattern matching *)fun sum_triple tri = let val (x, y, z) = tri in x + y + z end(* Final version *)fun sum_triple (x, y, z) = x + y + z Interestingly, in the last example, it seems that it takes three arguments. Actually, all functions in ML take and return exactly one argument. Function PatternsWe can also repeat the fun type:123fun f p1 = e1 | p2 = e2 | p3 = e3 Type InferenceML can infer some of the type in functions.123(* ML can infer it is int * 'a * int -&gt; int *)fun partial_sum (x, y, z) = x + z Equality Types''a is an equality type that can only be replaced by types that can use = (e.g., string, int). Here is an example:123(* ''a * ''a -&gt; string *)fun same_thing (x, y) = if x = y then &quot;yes&quot; else &quot;no&quot; ExceptionsType of all exceptions: exn.12345678(* Create an exception *)exception MyFirstExceptionexception MySecException of int * intraise MySecException (3, 4)(* e1 handle ex =&gt; v2 *)val x = hd [] handle MyFirstException =&gt; 10 Tail RecursionML will first pop the caller before the call and allow the callee to reuse the stack.","link":"/2023/12/27/Intro_to_PL%20(Week%202)/"},{"title":"Intro_to_PL (Week 3)","text":"Functional ProgrammingA language is functional programming when avoiding mutation in most cases using functions as values First-Class FunctionsFirst-Class Functions means we can use functions whenever we use values. 1234fun double_triple f = if f 7 then fn x =&gt; 2*x else fn x =&gt; 3*x Higher-Order FunctionsA function that takes or returns a function. Function ClosureFunctions can use bindings from outside the function definition (in scope where function is defined) Here is an example:123456789fun A() = let val x = 10 (* A local variable in A's scope *) (* B is a closure that uses x from A's scope *) fun B(y) = x + y in B (* A returns B as a closure *) end;The closure B maintains access to the environment it was created in A’s local scope, even after A has completed execution. Anonymous FunctionsUse keyword fn: fn x =&gt; 3*x Lexical ScopeLexical Scope means the scope where function is defined. Function bodies can use bindings in the lexical scope. This is because a function value has two parts, which forms a pair: the code the environment where the function is defined This pair is called function closure. For instance, the binding fun f y = x + y bound f to a closure. Here is a quiz:1234fun f g = let val x = 9 in g() endval x = 7fun h() = x+1val y = f hIt is x=8 under lexical scope and x=10 under dynamic scope. Under dynamic scope, the body of function h would end up “seeing” the local binding of x to 9 and if we removed this local binding (since it appears to have no purpose), then dynamic scope would lead to an undefined variable. Map, Filter, FoldFoldfold(f, acc, [x_1, x_2, x_3]) computes f(f(f(acc, x_1), x_2), x_3) The implememtation is:12345(* ('a * 'b -&gt; 'a) * 'a * 'b list -&gt; 'a *)fun fold (f, acc, xs) = case xs of [] =&gt; acc | x::xs =&gt; fold (f, f(acc, x), xs) Here is a sample function checking whether all elements in xs satisfies function g,1fun f (g, xs) = fold ((fn(x, y) =&gt; x andalso g y), true, xs) Currying12345val f = fn x =&gt; fn y =&gt; fn z =&gt; z &gt;= y andalso y &gt;= xval res = (((f 3) 4) 5)(* Syntatic sugar *)fun f x y z = z &gt;= y andalso y &gt;= x Therefore, instead of writing (((f 3) 4) 5), ML uses f 3 4 5. Partial ApplicationWe can take advantage of currying,1val incre_all = List.map (fn x =&gt; x + 1) Combining Functions123val f = Math.sqrt o Real.fromInt o absval x = f ~4;(* val it = 2.0 : real *) We can also use pipeline operator:123infix |&gt; fun x |&gt; f = f xfun g i = i |&gt; abs |&gt; Real.fromInt |&gt; Math.sqrt We can also change currying and uncurrying using the following functions:12345(* ('a * 'b -&gt; 'c) -&gt; 'a -&gt; 'b -&gt; 'c *)fun curry f x y = f (x, y)(* ('a -&gt; 'b -&gt; 'c) -&gt; 'a * 'b -&gt; 'c *)fun uncurry f (x, y) = f x y Mutable References Type t ref, where t is a type Use ref e to create a reference with initial content e e1 := e2 to update the content !e to retrieve the content An example for using ref:12345val x = ref (1, &quot;hi&quot;)val z = xval _ = x := (3, &quot;world&quot;)val y = #1 (!z)(* val y = 3 : int *) CallbacksClients can register to an event that provides a “callback” — a function that gets called when an event happens. For example, a computer library might need to tell whether a client has pressed his key. The purpose of these libraries is to let multiple users register to some events using “callback”. However, a library cannot tell whether a client needs extra messages to finish his computation. A function closure is ideal because a function type t1 -&gt; t2 does not specify any other variables it uses. Here is an example for callbacks.1234567891011121314151617181920val onKeyEvent : (int -&gt; unit) -&gt; unitval cbs : (int -&gt; unit) list ref = ref []fun onKeyEvent f = cbs := f::(!cbs) (* The only &quot;public&quot; binding *)fun onEvent i = let fun loop fs = case fs of [] =&gt; () | f::fs’ =&gt; (f i; loop fs’) in loop (!cbs) endval timesPressed = ref 0val _ = onKeyEvent (fn _ =&gt; timesPressed := (!timesPressed) + 1)fun printIfPressed i = onKeyEvent (fn j =&gt; if i=j then print (&quot;you pressed &quot; ^ Int.toString i ^ &quot;\\n&quot;) else ())val _ = printIfPressed 4val _ = printIfPressed 11val _ = printIfPressed 23 Abstract Data Types With Closures123456datatype set = S of { insert : int -&gt; set, member : int -&gt; bool, size : unit -&gt; int }val empty_set : set","link":"/2023/12/30/Intro_to_PL%20(Week%203)/"},{"title":"Overview of OCaml","text":"From website: https://cs3110.github.io/textbook/chapters/basics/functions.html Basic Knowledge “A language that doesn’t affect the way you think about programming is not worth knowing.” — Alan J. Perlis (1922-1990), first recipient of the Turing Award Why OCaml? Immutability Abstraction Type System Expressions12(* - : int = 6 *)4 + (if 'a' = 'b' then 1 else 2) Recursive FunctionsRecursive functions are defined like this:let rec f x = ... Mutually recursive functions can be defined with the and keyword: 12let rec f x1 ... xn = e1and g y1 ... yn = e2 For example: 123456789(** [even n] is whether [n] is even. Requires: [n &gt;= 0]. *)let rec even n = n = 0 || odd (n - 1)(** [odd n] is whether [n] is odd. Requires: [n &gt;= 0]. *)and odd n = n &lt;&gt; 0 &amp;&amp; even (n - 1);; Anonymous FunctionsOCaml functions do not have to have names; they may be anonymous.For example, here is an anonymous function that increments its input: fun x -&gt; x + 1. Pipeline12345func @@ 2 * 10;;func @@ 20;;square (inc 5);;5 |&gt; inc |&gt; square;; Labeled and Optional Argumentslet f ~name1:arg1 ~name2:arg2 = arg1 + arg2;; let f ?name:(arg1=8) arg2 = arg1 + arg2 Use: f ~name:1 2;; We can even define our own new infix operators, for example: let ( ^^ ) x y = max x y Tail RecursionA recursive call in tail position does not need a new stack frame.It can just reuse the existing stack frame. Module OCaml NameSpaces Structure Interfaces Signature Encapsulation Abstract Types Code Reuse Functors, include","link":"/2024/01/08/Overview-of-OCaml/"},{"title":"Distinct Count","text":"This is a Special topic for EECS 376 Distinct CountBackgroundSay, $\\{a_1, \\cdots a_M\\}$ are a set of IPs. They are sent to a router, and now the router wants to figure out how many distinct IPs. Let $n$ be the number of distinct IPs. If using a hashmap, it may take $O(n)$ space to implement. We can allow $n$ within a range: Pr[\\hat{n} \\in \\{ (1-\\epsilon)n, (1+\\epsilon)n \\}] < \\deltaCall it the “$(\\epsilon, \\delta)$” guarantee. We are aiming for a space of $O(\\epsilon^{-2} \\log{\\frac{1}{\\delta}})$. Aim Find an unbiased estimator (Random Hash Function). Reduce the variance (Apply Chebychev). Reduce the error probability (Apply Chernoff-Hoeffding). In general, a Random Hash Function is like: $h(IP address) \\rightarrow [0, 1]$. $h(a)$ is uniformly in the interval of [0, 1] and is independent. Min Sketch MethodWe are using the “Min sketch”: $Y = min(h(a_1), \\cdots, h(a_M))$. The reason is that $Y$ is good as it filters out duplicates of $a_i$. The distribution of $Y$ is only affected by the number of distinct elements in $\\{a_1, \\cdots a_M\\}$. Intuitive GuessThis process is equivalent to getting the smallest among $n$ random values between $[0, 1]$.Intuitively, this result is $\\frac{1}{n+1}$, because we can take $n = 1$ and the result is $\\frac{1}{2}$. Mathematical ProofE(Y) = \\int_{0}^{1} Pr(Y\\geq x) \\, dx = \\int_{0}^{1} Pr(Y\\geq x) \\, dx= \\int_{0}^{1} (1-x)^n \\, dxTherefore the expectation of $Y$, E(Y) = \\int_{0}^{1} x^n \\, dx = \\frac{1}{n+1}The estimation of $\\hat{n}$: $\\hat{n} = \\frac{1}{Y} - 1$. But this expected value of $\\hat{n}$ is infinite as $E\\left[\\frac{1}{Y}\\right] \\rightarrow \\infty$. To prove this, we make a partition between $[0, 1]$ | $\\cdots$ | $\\frac{1}{8}$ | $\\frac{1}{4}$ | $\\frac{1}{2}$ | In reality, E\\left[\\frac{1}{Y}\\right] \\geq \\frac{1}{2}\\times 1 + \\frac{1}{4}\\times 2 + \\frac{1}{8} \\times 4 + \\cdotsMultiple Hash FunctionsWe use $k$ hash functions and take its mean to approximate this $Y$, i.e., $Z = \\frac{Y_1 + Y_2 + \\cdots Y_k}{k}$. The expectation of $Z$ is equal to that of $Y$, i.e, $E(Z) = \\frac{1}{n+1}$, and its variance is reduced. Variance of $Z$Remember that, Var(Y) = E(Y^2) - E(Y)^2Var(X+Y) = Var(X) + Var(Y)Var(c) = c^2 Var(X)Therefore the variance of $Z$, Var(Z) = \\frac{1}{k^2} \\sum Var(Y_i) = \\frac{1}{k} Var(Y_i)Then we calculate the variance of $Y_i$, denote as $Y$. E(Y^2) = \\int_{0}^{1} Pr(Y^2\\geq x) \\, dx = \\int_{0}^{1} Pr(Y\\geq \\sqrt{x}) \\, dx= \\int_{0}^{1} (1-\\sqrt{x})^n \\, dxLet $u = 1 - \\sqrt{x}$, then $x = (1-u)^2$, $dx = -2(1-u) du$. E(Y^2) = \\int_{1}^{0} -2(1-u)u^n \\, du = 2\\int_{0}^{1} (1-u)u^n \\, du = \\frac{2}{(n+1)(n+2)}Var(Y) = E(Y^2) - E(Y)^2 = \\frac{2}{(n+1)(n+2)} - \\frac{1}{(n+1)^2} \\leq \\frac{1}{(n+1)^2}Therefore we get the variance of $Z$, Var(Z) = \\frac{Var(Y)}{k} \\leq \\frac{1}{k(n+1)^2}Chebychev InequalityUsing Chebychev, Pr(|Z - \\frac{1}{n+1}| \\geq \\frac{\\epsilon}{n+1}) \\leq \\frac{Var(Z)}{(\\frac{\\epsilon}{n+1})^2} \\leq \\frac{1}{k\\epsilon^2}Picking $\\frac{1}{k\\epsilon^2} \\leq \\frac{1}{3}$ (Randomly, just a small value), then $k = \\frac{3}{\\epsilon^2}$. $Pr(\\frac{1}{Z} - 1\\textit{ is a good estimate}) \\geq \\frac{2}{3}$. We can pick $k$ larger, but it is not practical, because we are paying for the accuracy, $k = \\frac{\\delta}{\\epsilon^2}$. ImprovementsWe take multiple $Z$ and get their median: W = median(Z_1, \\cdots Z_k) median is more robust than simply $Z$ As long as good estimates is more than half, we are happy with that result. Define $I_i = 1$ when $\\frac{1}{Z} - 1$ is a good estimator. $E[I_i] \\geq \\frac{2}{3}$, $X = I_1 + \\cdots + I_l$, then $E(X) \\geq \\frac{2l}{3}$. $Pr(X \\leq \\frac{l}{2}) = Pr(\\frac{X}{l} \\leq \\frac{2}{3} - \\frac{1}{6}) \\leq e^{-2 \\frac{1}{6^2} l}$ This is a logarithmic approximation. The Space (in bits): $3 \\epsilon^{-2} \\log{\\ln{\\frac{1}{3}}} \\cdot 64$bits.","link":"/2023/12/04/Special%20Topic/"},{"title":"Abstract","text":"This is the Abstract part for SJTU WDP PurposeExplore the rationality of the supply and demand of medical resources in fever clinic in Jinshan Street in Fuzhou and then determine the next location of a clinic. DescriptionThe covid-19 virus is getting serious at present. It is obvious that the medical resource could not meet with the increasing need. Therefore, we aim to explore how to distribute medical resource to ensure the health of the population in Jinshan Street to the greatest extent possible. In our project, medical resource is reflected in fever clinics. The overall health condition is evaluated by local severe cases. Data needed Addresses of communities in Jinshan Street Population of communities in Jinshan Street Scale of fever clinics in Jinshan Street StepsPart I: Supply and Demand Evaluation Simulation of the outbreak for a period Use SEIR model Set parameters to reflect the real situation in a region Evaluate whether supply and demand meets Draw the curve of severe cases The slower rate of increase, the lower peak value, the better supply and demand meets Part II: Optimal Location of the Next Clinic Divide the map into grid Take advantage of a heat map to show the effectiveness of each cell as the fifth location","link":"/2023/01/08/abstract/"},{"title":"Discussion","text":"This is the Discussion part for SJTU WDP Discussion Simulation: Due to a lack of data, many assumptions are made, which may not be consistent with the real situation here. This will cause errors. However, those missing information can be acquired somehow for better simulation. Assumptions: The pattern of movement between zones within the region in a typical day is randomized Solution: the exchange of population between zones can be obtained by phone data like public transportation usage The transition rate between Infected and Recovered is the same for all regions Solution: count the average recovering time for each region, which is related to population structure and clinics scale, etc. Evaluate Supply and Demand relation Currently, we use the formula peak value for infected cases divided by the time to peak to reflect the seriousness of outbreak in a region. However, we should also take into account factors such as the proportion of severe disease and the extent of economic damage. For example, communities with a large proportion of elderly people should be given priority. Select the location for the fifth clinic We design the effectiveness of a new location as a formula. $cost=\\sum_{i=0}^n w_0((x - x_0)^2 + (y - y_0)^2)$ $w_0$ reflects the seriousness of the outbreak in the community. For the convenience, the clinic should be built nearer to area with serious situation. We aim to minimize the cost value in order to select the optimal location. There is still some room for improvement. We divide the Jinshan Street into $n=21$ communities, and treat them as a point with correspoinding population for the sake of convenience. However, a community consists of many residential quarters, and each residential quarter has many buildings. This method can be optimized given real population data of Jinshan Street. In this way, we could treat people in the same building as a whole and build more complex but accurate models The distance between the new clinic and communities are all straight-line distance. However, we should consider public transport development and road condition. For future research, we may take advantage of map software to calculate the real distance.","link":"/2023/01/08/discussion/"},{"title":"eecs445 notes","text":"Notes for EECS 445. Linear Classifier feature, labels space: $\\bar{x}^{(i)} \\in \\mathbb{R}^d$, $y^{(i)}$ Labels -&gt; Supervised Learning. Classification Problem: finite, discrete labels. $S_n = \\{ (\\bar{x}^{(i)}, y^{(i)}) \\}_{i=1}^{n}$ Linear Decision Boundary Overfitting, underfitting $\\bar{x}^{(i)} = [x_{1}^{(i)}, x_{2}^{(i)}, \\cdots, x_{k}^{(i)}]$ Hyperplanes in $\\mathbb{R}^d$: $\\bar{\\theta} \\cdot \\bar{x} + b = 0$. $\\bar{\\theta} \\in \\mathbb{R}^d$ is called parameter vector, $b \\in \\mathbb{R}$ is the offset. Linear Classifier: $h(\\bar{x}; \\bar{\\theta}) = sgn(\\bar{\\theta} \\cdot \\bar{x})$ Training Error: $E_n(\\bar{\\theta}) = \\frac{1}{n} \\sum_{i = 1}^{n} [[ y^{(i)} \\neq h(\\bar{x}^{(i)}; \\bar{\\theta}) ]] = \\frac{1}{n} \\sum_{i = 1}^{n} [ y^{(i)} h(\\bar{x}^{(i)}; \\bar{\\theta}) \\leq 0] \\in [0, 1]$ The Preception Algorithm Perceptron Let $\\bar{x}^{(i)} \\in \\mathbb{R}^d$, $\\bar{x}^{(i)’} = [1, \\bar{x}^{(i)}]^T$, $\\bar{\\theta}^{(i)’} \\in \\mathbb{R}^{d+1}$ $R_n(\\bar{\\theta}) = \\frac{1}{n} \\sum_{i = 1}^{n} LOSS[ y^{(i)}; h(\\bar{x}^{(i)}; \\bar{\\theta})]$. Hinge Loss. Gradient Descent (GD), Step size. Gradient Descend GD :$\\bar{\\theta}^{(k+1)} = \\bar{\\theta}^{(k)} - \\eta \\nabla_{\\bar{\\theta}} R_n(\\bar{\\theta}) |_{\\bar{\\theta} = \\bar{\\theta}^{(k)}}$. Because for Hinge Loss Function, $R_n(\\bar{\\theta}) = \\sum_{i = 1}^{n} \\max\\{ 1 - y^{(i)} (\\bar{\\theta} \\cdot \\bar{x}^{(i)}), 0 \\}$. Stochastic Gradient Descent (SGD) $\\bar{\\theta}^{(k+1)} = \\bar{\\theta}^{(k)} - \\eta \\nabla_{\\bar{\\theta}} Loss_h(y^{(i)} (\\bar{\\theta} \\cdot \\bar{x}^{(i)})) |_{\\bar{\\theta} = \\bar{\\theta}^{(k)}}$. Support Vector Machines We want the boundary maximize the minimal distance to any of the training dataset. QP: Quadratic Program. Hard-Margin SVM: We want to inimize $\\frac{y^{(i)} (\\bar{\\theta} \\cdot \\bar{x}^{(i)})}{||\\bar{\\theta}||}$, s.t.. $y^{(i)} (\\bar{\\theta} \\cdot \\bar{x}^{(i)}) \\geq 1$. Soft-Margin SVM: allow some “violates”.","link":"/2024/01/17/eecs445-notes/"},{"title":"Methods","text":"This is the Method part for SJTU WDP Method Simulation of coronavirus outbreak: SEIR model (sample code + pic) The population can be divided into four compartments: Susceptible (those who can catch the disease) Exposed (those who are exposed to the disease but don’t have symptoms yet) Infected (those who show symptoms and are infective) Recovered (those who have recovered and become immune). The model takes into account following factors, which is reflected in initially set parameters. the transition rate between Susceptible and Exposed the transition rate between Infected and Recovered an incubation period, during which those who are exposed are not infective outbreak starts from an initial 10 infected cases the pattern of movement between zones within the region in a typical day The relationship between Susceptible, Exposed, Infected, Recovered is reflected in differential equations.$Susceptible \\rightarrow Exposed \\rightarrow Infected \\rightarrow Recovered$ $dS \\over dT$ eq2 eq3 eq4 Evaluate whether supply and demand meets Draw the curve of infected cases with in the region. The seriousness is defined as the peak value divided by the time of reaching the peak. pic1 Decide the location of the fifth clinic based on current simulation Use a mathematical formula to determine the effectiveness of a new location. The lower the value is, the better the location will be. $Effectiveness=\\sum_{i=0}^n w_0((x - x_0)^2 + (y - y_0)^2)$ Divide the map into grid and calculate the effectiveness for each cell Display the effectiveness in the form of heatmap, which will indicate the optimal location","link":"/2023/01/08/methods/"},{"title":"eecs498 notes","text":"Notes for EECS 498 Imperative, Declarative (like SQL). int is mathematical integer. Immutatable is important (what about shadowing) Expression (evaluate a value) and Statement Ghost (not compiled) Lemma syntax Pre and post conditions Prove by contradiction (?): a lemma proves false. The body of function is always visible. Quantifier forall x | Q(x) :: P(x) statement form, 12345forall x | Q(x) ensures P(x){} exists needs a witness. Imperative1234predicate IsMaxIndex(a:seq&lt;int&gt;, x:int) { &amp;&amp; 0 &lt;= x &lt; |a| &amp;&amp; (forall i | 0 &lt;= i &lt; |a| :: a[i] &lt;= a[x])}","link":"/2024/01/17/eecs498-notes/"},{"title":"eecs482 notes","text":"Notes for EECS482. Process, ThreadProcess A process contains the state for a program to run. Process has its own virtual memory, CPU, open files. Process and Program: when a program runs, it becomes a process A process has memory (code, data, executing stack), Program Counter (PC), some registers, some OS resources (open files, network connections) Thread Thread defines a sequence of execution stream. Thread has it own PC, SP, Registers Relationship A thread is bound to a process. A process can have many threads. Sometimes interact, sometimes work independently Per-thread State Each thread has its own PC, SP, The Data Segment (Heap + Static variables) is shared Synchronization Atomic actions are the unit of interleaving. Controlling how events from different threads can interleave is called synchronization. Mutual exclusion Critical section Mutual exclusion: Safe Progress: Liveness Bounded waiting: Liveness Performance Busy waiting: consumes CPU while waiting. Lock:","link":"/2024/01/17/eecs482-notes/"},{"title":"eecs483 notes","text":"Notes for EECS 483. callee function prologue","link":"/2024/01/24/eecs483-notes/"}],"tags":[{"name":"Daily","slug":"Daily","link":"/tags/Daily/"},{"name":"Formal Verification, Dafny","slug":"Formal-Verification-Dafny","link":"/tags/Formal-Verification-Dafny/"},{"name":"Programming Language","slug":"Programming-Language","link":"/tags/Programming-Language/"},{"name":"Course Material","slug":"Course-Material","link":"/tags/Course-Material/"},{"name":"DWP","slug":"DWP","link":"/tags/DWP/"},{"name":"Machine Learning, Notes","slug":"Machine-Learning-Notes","link":"/tags/Machine-Learning-Notes/"},{"name":"Verification, Notes","slug":"Verification-Notes","link":"/tags/Verification-Notes/"}],"categories":[{"name":"Formal Verification, Dafny","slug":"Formal-Verification-Dafny","link":"/categories/Formal-Verification-Dafny/"},{"name":"Programming Language","slug":"Programming-Language","link":"/categories/Programming-Language/"},{"name":"Course Material","slug":"Course-Material","link":"/categories/Course-Material/"},{"name":"DWP","slug":"DWP","link":"/categories/DWP/"}],"pages":[{"title":"About","text":"Beijie Liu Email: kekeliu@umich.edu Objective:Aspiring Computer Science student at the University of Michigan with a strong foundation in mathematics and a passion for Electrical and Computer Engineering. Seeking to leverage my academic background and passion for technology to contribute to innovative projects in the field of Computer Science. Education:University of MichiganBachelor of Science in Computer ScienceCurrent StudentShanghai Jiao Tong University (SJTU)Bachelor of Science in Electrical and Computer EngineeringGraduated [Year of Graduation]Shanghai High SchoolHigh School DiplomaFocus: Advanced MathematicsGraduated [Year of Graduation]Experience: Mathematics CompetitionsAchieved numerous accolades in mathematics competitions during primary and high school.Personal ProjectsEngaged in various personal projects related to gaming and technology, showcasing skills in strategy, problem-solving, and creativity.Skills: Advanced knowledge of mathematics and its applicationsProficiency in Electrical and Computer Engineering principlesStrong analytical and problem-solving abilitiesPassionate about gaming, with a focus on strategy and MOBA gamesExcellent teamwork and communication skillsAdaptive and quick learner with a keen interest in technological innovationsInterests: Gaming: Proficient in card games like MahjongSoul and MOBA games such as Arena of Valor.Mathematics: Deep interest and background in mathematics, leading to participation in numerous competitions.Personal Qualities: Committed to academic excellence and continuous learning.Ability to balance rigorous academic pursuits with personal interests.Strong sense of camaraderie and value in forming meaningful friendships.","link":"/about/index.html"},{"title":"","text":"About Me /* About Me CSS */ .centered-image { display: flex; justify-content: center; } .about-me { padding: 20px; margin: 20px; background-color: #f0f0f0; } .about-me h2 { font-size: 24px; font-weight: bold; } .about-me img { width: 150px; height: 150px; border-radius: 50%; margin: 10px 0; } .about-me p, .about-me ul { font-size: 16px; line-height: 1.6; } About Me Contact Information: Email: kekeliu@umich.edu, Github Objective Aspiring Computer Science student at the University of Michigan with a strong foundation in mathematics and a passion for Electrical and Computer Engineering. Seeking to leverage my academic background and passion for technology to contribute to innovative projects in the field of Computer Science. Education University of Michigan - Bachelor of Science in Computer Science, Current Student Shanghai Jiao Tong University (SJTU) - Bachelor of Science in Electrical and Computer Engineering, Current Student Shanghai High School - High School Diploma, Focus: Mathematics, Graduated in 2021 Experience Achieved numerous accolades in mathematics competitions during primary and high school. Engaged in various personal projects related to gaming and technology, showcasing skills in strategy, problem-solving, and creativity. Skills Advanced knowledge of mathematics and its applications Proficiency in Electrical and Computer Engineering principles Strong analytical and problem-solving abilities Passionate about gaming, with a focus on strategy and MOBA games Great teamwork and communication skills Adaptive and quick learner with a keen interest in technological innovations Interests Gaming: Proficient in card games like MahjongSoul and MOBA games such as Arena of Valor. Mathematics: Deep interest and background in mathematics, leading to participation in numerous competitions. Personal Qualities Committed to academic excellence and continuous learning. Ability to balance rigorous academic pursuits with personal interests. Strong sense of camaraderie and value in forming meaningful friendships.","link":"/about/index.html"},{"title":"","text":"- html { color: #1a1a1a; background-color: #fdfdfd; } @media (max-width: 600px) { body { font-size: 0.9em; padding: 12px; } h1 { font-size: 1.8em; } } @media print { html { background-color: white; } body { background-color: transparent; color: black; font-size: 12pt; } p, h2, h3 { orphans: 3; widows: 3; } h2, h3, h4 { page-break-after: avoid; } } p { margin: 1em 0; } a { color: #1a1a1a; } a:visited { color: #1a1a1a; } img { max-width: 100%; } svg { height: auto; max-width: 100%; } h1, h2, h3, h4, h5, h6 { margin-top: 1.4em; } h5, h6 { font-size: 1em; font-style: italic; } h6 { font-weight: normal; } ol, ul { padding-left: 1.7em; margin-top: 1em; } li > ol, li > ul { margin-top: 0; } blockquote { margin: 1em 0 1em 1.7em; padding-left: 1em; border-left: 2px solid #e6e6e6; color: #606060; } code { font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace; font-size: 85%; margin: 0; hyphens: manual; } pre { margin: 1em 0; overflow: auto; } pre code { padding: 0; overflow: visible; overflow-wrap: normal; } .sourceCode { background-color: transparent; overflow: visible; } hr { background-color: #1a1a1a; border: none; height: 1px; margin: 1em 0; } table { margin: 1em 0; border-collapse: collapse; width: 100%; overflow-x: auto; display: block; font-variant-numeric: lining-nums tabular-nums; } table caption { margin-bottom: 0.75em; } tbody { margin-top: 0.5em; border-top: 1px solid #1a1a1a; border-bottom: 1px solid #1a1a1a; } th { border-top: 1px solid #1a1a1a; padding: 0.25em 0.5em 0.25em 0.5em; } td { padding: 0.125em 0.5em 0.25em 0.5em; } header { margin-bottom: 4em; text-align: center; } #TOC li { list-style: none; } #TOC ul { padding-left: 1.3em; } #TOC > ul { padding-left: 0; } #TOC a:not(:hover) { text-decoration: none; } code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} div.columns{display: flex; gap: min(4vw, 1.5em);} div.column{flex: auto; overflow-x: auto;} div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;} /* The extra [class] is a hack that increases specificity enough to override a similar rule in reveal.js */ ul.task-list[class]{list-style: none;} ul.task-list li input[type=\"checkbox\"] { font-size: inherit; width: 0.8em; margin: 0 0.8em 0.2em -1.6em; vertical-align: middle; } .display.math{display: block; text-align: center; margin: 0.5rem auto;} Beijie Liu Email: kekeliu@umich.edu EDUCATION The University of Michigan Sep 2023 - Present Major in Computer Science Core Courses: Data Structures and Algorithms (A+), Computer Organization, Foundations of Computer Science (A) Core GPA: 4.0/4.0 The University of Michigan - Shanghai Jiao Tong University Joint Institute Sep 2021 - Present Major in Electrical and Computer Engineering Core Courses: Honors Mathematics, Discrete Mathematics (A+), Intro to Engineering, Computers and Programming (A) Core GPA: 3.83/4.0 RELATED EXPERIENCE Vice president in Student Science and Technology Innovation Association (Aug 2022 - Aug 2023) Deliver programming workshops to instruct students on various subjects, including C++, Python, and web design Organize technology-focused competitions for both freshman and sophomore students, fostering their engagement Online Games based on Elm Programming (May 2022 - Aug 2022) Lead the development from conception to completion, incorporating innovative gameplay elements and custom artwork. Design and implement engaging video games using Elm, including a Brick game and an open-world shooting game. RESEARCH EXPERIENCE “Acemap\" research group | Shanghai Jiao Tong University (Feb 2022 – Aug 2022) Worked on a Geological Searching Website based on Machine Learning with seniors and graduate students Conducted and facilitated research by utilizing large datasets, employing Python on servers as a means of analysis Enhanced the visual aesthetics of our research group’s website using Gephi SCHOLARSHIPS AND AWARDS Yu Liming Scholarship | Shanghai Jiao Tong University (Nov 2022) Shanghai High School Scholarship | Shanghai High School (May 2020) ACADEMIC ACHIEVEMENTS Mathematics (Oct 2020 – Jan 2022) Achieved the third prize in the National Student Mathematics Competition Earned the first prize and secured the 26th place in the Chinese Mathematical Olympiad in Senior Engineering (Sep 2021 – Mar 2023) Received an Honorable Mention in The Mathematical Contest in Modeling (MCM) Attained a position in the top 8 and was awarded the best industrial design award in the VEX Robotics Competition TECHNICAL EXPERIENCES Innovative VSCode Plugin: \"JOJ Tools\" (Sep 2022- Oct 2022) Collaborated with a team of three members to design and implement the function and icon using Typescript Developed the plugin to provide convenient access for students to the JI Online Judges (JOJ) platform TECHNICAL SKILLS Three years’ proficiency in C and C++. Skilled in Python, LaTeX, Git, Vim. Experienced in Elm and Ocaml for functional programming. Proficient in Matlab for data analysis. Knowledgeable in Dafny for software verification.","link":"/r/resume.html"}]}